/*
 * This file contain class Pyramid which
 * contains some method to form pattern.
 */

/**
 * Pyramid class includes methods like
 * spaces, numbers and print which helps
 * in forming pattern.
 * @author Satyam Bhadoria
 * @version 1.0
 */
public class Pyramid {
	
	/**
	 * This method returns string of white-spaces
	 * as per given row number
	 * @param row - row number
	 * @param n - maximum number upto which pattern should be print
	 * @return string of spaces
	 */
	public String spaces (int row, int n) throws PatternException {
		String spaceString = "";							//holds white-spaces
		
		/*throws exception if number is less than 0*/
		if (n < 0 || row <= 0) {
			throw new PatternException ("should be greater than 0");
		}
		
		/*throws exception when row number is greater than pattern number*/
		if (row > ( (2 * n) - 1) ) {
			throw new PatternException ("row number cannot be greater than pattern number");
		}
		
		/*generate white-spaces*/
		for (int i = Math.abs (row - n); i > 0; i--) {
			spaceString += " ";
		}
		return spaceString;
	}
	
	/**
	 * This method returns string of numbers
	 * as per given row number
	 * @param row - row number
	 * @param n - maximum number upto which pattern should be print
	 * @return string of numbers
	 */
	public String numbers (int row, int n) throws PatternException {
		String numberString = "";			//store numbers in increasing followed by decreasing order
		boolean flagForReverseNum = false;			//flag for decreasing number pattern
		int i = 2 * Math.abs (row - n);		//initializes counter
		
		/*throws exception if number is less than 0*/
		if (n < 0 || row <= 0) {
			throw new PatternException ("should greater than 0");
		}
		
		/*throws exception when row number is greater than pattern number*/
		if (row > ( (2 * n) - 1) ) {
			throw new PatternException ("row number cannot be greater than pattern number");
		}
		
		/*generate number in increasing followed by decreasing order pattern*/
		for (int j = 0; i <= (2 * n) - 1; i++) {
			
			/*making lower row distance from bottom equal to upper row distance from top*/
			if (row > n) {
				row = (2 * n) - row;
			}
			
			/*generating and concatenating
			 * increasing order pattern in if condition
			 * decreasing order pattern in else if condition
			 */
			if (flagForReverseNum == false && j < row) {
				j++;
				numberString += Integer.toString(j);
			} else if (j > 1) {
				j--;
				numberString += Integer.toString(j);
				flagForReverseNum = true;
			}
		}
		return numberString;
	}
	
	/**
	 * This method returns complete pyramid using
	 * method spaces and numbers
	 * @param n - maximum number upto which pattern should be print
	 * @return string containing pyramid
	 */
	public String[] print (int n) throws PatternException {
		String[] stringArray; 		//store strings generated by spaces and numbers
		
		/*throws exception if number is less than or equal to 0*/
		if (n < 0) {
			throw new PatternException ("should greater than 0");
		}
		stringArray = new String[(2 * n) - 1];
		
		/*concatenate space and number string for each row*/
		for (int i = 0; i < (2 * n) - 1 ; i++) {
			stringArray[i] = spaces (i + 1, n) + numbers (i + 1, n);	//assign concatenate result
		}
		return stringArray;
	}
}
